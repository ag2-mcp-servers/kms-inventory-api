# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:21:34+00:00

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional

from pydantic import BaseModel, Field


class GoogleCloudKmsInventoryV1ProtectedResource(BaseModel):
    cloudProduct: Optional[str] = Field(
        None, description='The Cloud product that owns the resource. Example: `compute`'
    )
    createTime: Optional[str] = Field(
        None,
        description='Output only. The time at which this resource was created. The granularity is in seconds. Timestamp.nanos will always be 0.',
    )
    cryptoKeyVersion: Optional[str] = Field(
        None,
        description='The name of the Cloud KMS [CryptoKeyVersion](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys.cryptoKeyVersions?hl=en) used to protect this resource via CMEK. This field is empty if the Google Cloud product owning the resource does not provide key version data to Asset Inventory. If there are multiple key versions protecting the resource, then this is same value as the first element of crypto_key_versions.',
    )
    cryptoKeyVersions: Optional[List[str]] = Field(
        None,
        description='The names of the Cloud KMS [CryptoKeyVersion](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys.cryptoKeyVersions?hl=en) used to protect this resource via CMEK. This field is empty if the Google Cloud product owning the resource does not provide key versions data to Asset Inventory. The first element of this field is stored in crypto_key_version.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description="A key-value pair of the resource's labels (v1) to their values.",
    )
    location: Optional[str] = Field(
        None,
        description='Location can be `global`, regional like `us-east1`, or zonal like `us-west1-b`.',
    )
    name: Optional[str] = Field(
        None,
        description='The full resource name of the resource. Example: `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`.',
    )
    project: Optional[str] = Field(
        None, description='Format: `projects/{PROJECT_NUMBER}`.'
    )
    projectId: Optional[str] = Field(
        None, description='The ID of the project that owns the resource.'
    )
    resourceType: Optional[str] = Field(
        None, description='Example: `compute.googleapis.com/Disk`'
    )


class GoogleCloudKmsInventoryV1ProtectedResourcesSummary(BaseModel):
    cloudProducts: Optional[Dict[str, str]] = Field(
        None,
        description='The number of resources protected by the key grouped by Cloud product.',
    )
    locations: Optional[Dict[str, str]] = Field(
        None,
        description='The number of resources protected by the key grouped by region.',
    )
    name: Optional[str] = Field(
        None,
        description='The full name of the ProtectedResourcesSummary resource. Example: projects/test-project/locations/us/keyRings/test-keyring/cryptoKeys/test-key/protectedResourcesSummary',
    )
    projectCount: Optional[int] = Field(
        None,
        description='The number of distinct Cloud projects in the same Cloud organization as the key that have resources protected by the key.',
    )
    resourceCount: Optional[str] = Field(
        None,
        description='The total number of protected resources in the same Cloud organization as the key.',
    )
    resourceTypes: Optional[Dict[str, str]] = Field(
        None,
        description='The number of resources protected by the key grouped by resource type.',
    )


class GoogleCloudKmsInventoryV1SearchProtectedResourcesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    protectedResources: Optional[List[GoogleCloudKmsInventoryV1ProtectedResource]] = (
        Field(None, description='Protected resources for this page.')
    )


class Purpose(Enum):
    CRYPTO_KEY_PURPOSE_UNSPECIFIED = 'CRYPTO_KEY_PURPOSE_UNSPECIFIED'
    ENCRYPT_DECRYPT = 'ENCRYPT_DECRYPT'
    ASYMMETRIC_SIGN = 'ASYMMETRIC_SIGN'
    ASYMMETRIC_DECRYPT = 'ASYMMETRIC_DECRYPT'
    MAC = 'MAC'


class Algorithm(Enum):
    CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED = (
        'CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED'
    )
    GOOGLE_SYMMETRIC_ENCRYPTION = 'GOOGLE_SYMMETRIC_ENCRYPTION'
    RSA_SIGN_PSS_2048_SHA256 = 'RSA_SIGN_PSS_2048_SHA256'
    RSA_SIGN_PSS_3072_SHA256 = 'RSA_SIGN_PSS_3072_SHA256'
    RSA_SIGN_PSS_4096_SHA256 = 'RSA_SIGN_PSS_4096_SHA256'
    RSA_SIGN_PSS_4096_SHA512 = 'RSA_SIGN_PSS_4096_SHA512'
    RSA_SIGN_PKCS1_2048_SHA256 = 'RSA_SIGN_PKCS1_2048_SHA256'
    RSA_SIGN_PKCS1_3072_SHA256 = 'RSA_SIGN_PKCS1_3072_SHA256'
    RSA_SIGN_PKCS1_4096_SHA256 = 'RSA_SIGN_PKCS1_4096_SHA256'
    RSA_SIGN_PKCS1_4096_SHA512 = 'RSA_SIGN_PKCS1_4096_SHA512'
    RSA_SIGN_RAW_PKCS1_2048 = 'RSA_SIGN_RAW_PKCS1_2048'
    RSA_SIGN_RAW_PKCS1_3072 = 'RSA_SIGN_RAW_PKCS1_3072'
    RSA_SIGN_RAW_PKCS1_4096 = 'RSA_SIGN_RAW_PKCS1_4096'
    RSA_DECRYPT_OAEP_2048_SHA256 = 'RSA_DECRYPT_OAEP_2048_SHA256'
    RSA_DECRYPT_OAEP_3072_SHA256 = 'RSA_DECRYPT_OAEP_3072_SHA256'
    RSA_DECRYPT_OAEP_4096_SHA256 = 'RSA_DECRYPT_OAEP_4096_SHA256'
    RSA_DECRYPT_OAEP_4096_SHA512 = 'RSA_DECRYPT_OAEP_4096_SHA512'
    RSA_DECRYPT_OAEP_2048_SHA1 = 'RSA_DECRYPT_OAEP_2048_SHA1'
    RSA_DECRYPT_OAEP_3072_SHA1 = 'RSA_DECRYPT_OAEP_3072_SHA1'
    RSA_DECRYPT_OAEP_4096_SHA1 = 'RSA_DECRYPT_OAEP_4096_SHA1'
    EC_SIGN_P256_SHA256 = 'EC_SIGN_P256_SHA256'
    EC_SIGN_P384_SHA384 = 'EC_SIGN_P384_SHA384'
    EC_SIGN_SECP256K1_SHA256 = 'EC_SIGN_SECP256K1_SHA256'
    HMAC_SHA256 = 'HMAC_SHA256'
    HMAC_SHA1 = 'HMAC_SHA1'
    HMAC_SHA384 = 'HMAC_SHA384'
    HMAC_SHA512 = 'HMAC_SHA512'
    HMAC_SHA224 = 'HMAC_SHA224'
    EXTERNAL_SYMMETRIC_ENCRYPTION = 'EXTERNAL_SYMMETRIC_ENCRYPTION'


class ProtectionLevel(Enum):
    PROTECTION_LEVEL_UNSPECIFIED = 'PROTECTION_LEVEL_UNSPECIFIED'
    SOFTWARE = 'SOFTWARE'
    HSM = 'HSM'
    EXTERNAL = 'EXTERNAL'
    EXTERNAL_VPC = 'EXTERNAL_VPC'


class State(Enum):
    CRYPTO_KEY_VERSION_STATE_UNSPECIFIED = 'CRYPTO_KEY_VERSION_STATE_UNSPECIFIED'
    PENDING_GENERATION = 'PENDING_GENERATION'
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'
    DESTROYED = 'DESTROYED'
    DESTROY_SCHEDULED = 'DESTROY_SCHEDULED'
    PENDING_IMPORT = 'PENDING_IMPORT'
    IMPORT_FAILED = 'IMPORT_FAILED'
    GENERATION_FAILED = 'GENERATION_FAILED'
    PENDING_EXTERNAL_DESTRUCTION = 'PENDING_EXTERNAL_DESTRUCTION'
    EXTERNAL_DESTRUCTION_FAILED = 'EXTERNAL_DESTRUCTION_FAILED'


class GoogleCloudKmsV1CryptoKeyVersionTemplate(BaseModel):
    algorithm: Optional[Algorithm] = Field(
        None,
        description='Required. Algorithm to use when creating a CryptoKeyVersion based on this template. For backwards compatibility, GOOGLE_SYMMETRIC_ENCRYPTION is implied if both this field is omitted and CryptoKey.purpose is ENCRYPT_DECRYPT.',
    )
    protectionLevel: Optional[ProtectionLevel] = Field(
        None,
        description='ProtectionLevel to use when creating a CryptoKeyVersion based on this template. Immutable. Defaults to SOFTWARE.',
    )


class GoogleCloudKmsV1ExternalProtectionLevelOptions(BaseModel):
    ekmConnectionKeyPath: Optional[str] = Field(
        None,
        description='The path to the external key material on the EKM when using EkmConnection e.g., "v0/my/key". Set this field instead of external_key_uri when using an EkmConnection.',
    )
    externalKeyUri: Optional[str] = Field(
        None,
        description='The URI for an external resource that this CryptoKeyVersion represents.',
    )


class Format(Enum):
    ATTESTATION_FORMAT_UNSPECIFIED = 'ATTESTATION_FORMAT_UNSPECIFIED'
    CAVIUM_V1_COMPRESSED = 'CAVIUM_V1_COMPRESSED'
    CAVIUM_V2_COMPRESSED = 'CAVIUM_V2_COMPRESSED'


class GoogleCloudKmsV1KeyOperationAttestationCertificateChains(BaseModel):
    caviumCerts: Optional[List[str]] = Field(
        None, description='Cavium certificate chain corresponding to the attestation.'
    )
    googleCardCerts: Optional[List[str]] = Field(
        None,
        description='Google card certificate chain corresponding to the attestation.',
    )
    googlePartitionCerts: Optional[List[str]] = Field(
        None,
        description='Google partition certificate chain corresponding to the attestation.',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class GoogleCloudKmsV1KeyOperationAttestation(BaseModel):
    certChains: Optional[GoogleCloudKmsV1KeyOperationAttestationCertificateChains] = (
        Field(
            None,
            description='Output only. The certificate chains needed to validate the attestation',
        )
    )
    content: Optional[str] = Field(
        None,
        description='Output only. The attestation data provided by the HSM when the key operation was performed.',
    )
    format: Optional[Format] = Field(
        None, description='Output only. The format of the attestation data.'
    )


class GoogleCloudKmsV1CryptoKeyVersion(BaseModel):
    algorithm: Optional[Algorithm] = Field(
        None,
        description='Output only. The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.',
    )
    attestation: Optional[GoogleCloudKmsV1KeyOperationAttestation] = Field(
        None,
        description='Output only. Statement that was generated and signed by the HSM at key creation time. Use this statement to verify attributes of the key as stored on the HSM, independently of Google. Only provided for key versions with protection_level HSM.',
    )
    createTime: Optional[str] = Field(
        None,
        description='Output only. The time at which this CryptoKeyVersion was created.',
    )
    destroyEventTime: Optional[str] = Field(
        None,
        description="Output only. The time this CryptoKeyVersion's key material was destroyed. Only present if state is DESTROYED.",
    )
    destroyTime: Optional[str] = Field(
        None,
        description="Output only. The time this CryptoKeyVersion's key material is scheduled for destruction. Only present if state is DESTROY_SCHEDULED.",
    )
    externalDestructionFailureReason: Optional[str] = Field(
        None,
        description='Output only. The root cause of the most recent external destruction failure. Only present if state is EXTERNAL_DESTRUCTION_FAILED.',
    )
    externalProtectionLevelOptions: Optional[
        GoogleCloudKmsV1ExternalProtectionLevelOptions
    ] = Field(
        None,
        description='ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level and EXTERNAL_VPC protection levels.',
    )
    generateTime: Optional[str] = Field(
        None,
        description="Output only. The time this CryptoKeyVersion's key material was generated.",
    )
    generationFailureReason: Optional[str] = Field(
        None,
        description='Output only. The root cause of the most recent generation failure. Only present if state is GENERATION_FAILED.',
    )
    importFailureReason: Optional[str] = Field(
        None,
        description='Output only. The root cause of the most recent import failure. Only present if state is IMPORT_FAILED.',
    )
    importJob: Optional[str] = Field(
        None,
        description='Output only. The name of the ImportJob used in the most recent import of this CryptoKeyVersion. Only present if the underlying key material was imported.',
    )
    importTime: Optional[str] = Field(
        None,
        description="Output only. The time at which this CryptoKeyVersion's key material was most recently imported.",
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The resource name for this CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`.',
    )
    protectionLevel: Optional[ProtectionLevel] = Field(
        None,
        description='Output only. The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion.',
    )
    reimportEligible: Optional[bool] = Field(
        None,
        description='Output only. Whether or not this key version is eligible for reimport, by being specified as a target in ImportCryptoKeyVersionRequest.crypto_key_version.',
    )
    state: Optional[State] = Field(
        None, description='The current state of the CryptoKeyVersion.'
    )


class GoogleCloudKmsV1CryptoKey(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The time at which this CryptoKey was created.'
    )
    cryptoKeyBackend: Optional[str] = Field(
        None,
        description='Immutable. The resource name of the backend environment where the key material for all CryptoKeyVersions associated with this CryptoKey reside and where all related cryptographic operations are performed. Only applicable if CryptoKeyVersions have a ProtectionLevel of EXTERNAL_VPC, with the resource name in the format `projects/*/locations/*/ekmConnections/*`. Note, this list is non-exhaustive and may apply to additional ProtectionLevels in the future.',
    )
    destroyScheduledDuration: Optional[str] = Field(
        None,
        description='Immutable. The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED. If not specified at creation time, the default duration is 24 hours.',
    )
    importOnly: Optional[bool] = Field(
        None,
        description='Immutable. Whether this key may contain imported versions only.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Labels with user-defined metadata. For more information, see [Labeling Keys](https://cloud.google.com/kms/docs/labeling-keys).',
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The resource name for this CryptoKey in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*`.',
    )
    nextRotationTime: Optional[str] = Field(
        None,
        description='At next_rotation_time, the Key Management Service will automatically: 1. Create a new version of this CryptoKey. 2. Mark the new version as primary. Key rotations performed manually via CreateCryptoKeyVersion and UpdateCryptoKeyPrimaryVersion do not affect next_rotation_time. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.',
    )
    primary: Optional[GoogleCloudKmsV1CryptoKeyVersion] = Field(
        None,
        description='Output only. A copy of the "primary" CryptoKeyVersion that will be used by Encrypt when this CryptoKey is given in EncryptRequest.name. The CryptoKey\'s primary version can be updated via UpdateCryptoKeyPrimaryVersion. Keys with purpose ENCRYPT_DECRYPT may have a primary. For other keys, this field will be omitted.',
    )
    purpose: Optional[Purpose] = Field(
        None, description='Immutable. The immutable purpose of this CryptoKey.'
    )
    rotationPeriod: Optional[str] = Field(
        None,
        description='next_rotation_time will be advanced by this period when the service automatically rotates a key. Must be at least 24 hours and at most 876,000 hours. If rotation_period is set, next_rotation_time must also be set. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.',
    )
    versionTemplate: Optional[GoogleCloudKmsV1CryptoKeyVersionTemplate] = Field(
        None,
        description='A template describing settings for new CryptoKeyVersion instances. The properties of new CryptoKeyVersion instances created by either CreateCryptoKeyVersion or auto-rotation are controlled by this template.',
    )


class GoogleCloudKmsInventoryV1ListCryptoKeysResponse(BaseModel):
    cryptoKeys: Optional[List[GoogleCloudKmsV1CryptoKey]] = Field(
        None, description='The list of CryptoKeys.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='The page token returned from the previous response if the next page is desired.',
    )
